// <auto-generated />
using System;
using AGM.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AGM.Database.Migrations
{
    [DbContext(typeof(AGMDBContext))]
    partial class AGMDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AGM.Domain.Entities.AlbionMap", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("AGM.Domain.Entities.ContentEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AlbionMapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CreatedByDiscordId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ModifiedByByDiscordId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartsOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SubTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("AlbionMapId");

                    b.HasIndex("SubTypeId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TypeId");

                    b.ToTable("ContentEvents");
                });

            modelBuilder.Entity("AGM.Domain.Entities.ContentEventSubType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContentEventTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Emoji")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("ContentEventTypeId");

                    b.ToTable("ContentContentEventSubTypes");
                });

            modelBuilder.Entity("AGM.Domain.Entities.ContentEventType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.ToTable("ContentEventTypes");
                });

            modelBuilder.Entity("AGM.Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("ChannelEventDiscordId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscordServerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("EventMessageDiscordId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("AGM.Domain.Entities.ContentEvent", b =>
                {
                    b.HasOne("AGM.Domain.Entities.AlbionMap", "AlbionMap")
                        .WithMany()
                        .HasForeignKey("AlbionMapId");

                    b.HasOne("AGM.Domain.Entities.ContentEventSubType", "SubType")
                        .WithMany()
                        .HasForeignKey("SubTypeId");

                    b.HasOne("AGM.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.HasOne("AGM.Domain.Entities.ContentEventType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("AlbionMap");

                    b.Navigation("SubType");

                    b.Navigation("Tenant");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("AGM.Domain.Entities.ContentEventSubType", b =>
                {
                    b.HasOne("AGM.Domain.Entities.ContentEventType", "ContentEventType")
                        .WithMany("SubTypes")
                        .HasForeignKey("ContentEventTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ContentEventType");
                });

            modelBuilder.Entity("AGM.Domain.Entities.ContentEventType", b =>
                {
                    b.Navigation("SubTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
